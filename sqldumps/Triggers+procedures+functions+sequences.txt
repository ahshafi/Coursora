create PROCEDURE CHECK_EXAM_REGISTRATION(S_ID IN NUMBER, E_ID IN NUMBER, REGISTERED OUT NUMBER)
IS
BEGIN
    SELECT COUNT(*) INTO REGISTERED
    FROM "EXAM" JOIN  "CONTENT" ON (EXAM.ID=E_ID AND "EXAM"."CONTENT_ID"="CONTENT"."ID")
    JOIN "Course" ON ("CONTENT"."COURSE_ID"="Course"."ID")
    JOIN "COURSE_REGISTRATION"
    ON ("COURSE_REGISTRATION"."COURSE_ID"="Course"."ID" AND "COURSE_REGISTRATION"."STUDENT_ID"=S_ID);
end;
/

create PROCEDURE COMMENT_DELETE(COMMENT_ID IN NUMBER)
IS
BEGIN
    FOR CURSOR IN (SELECT * FROM "COMMENT")
    LOOP
        IF CURSOR.PARENT_COMMENT_ID=COMMENT_ID THEN
            COMMENT_DELETE(CURSOR.ID);
        end if;
        end loop;
    DELETE FROM "COMMENT" WHERE ID=COMMENT_ID;

end;
/

create PROCEDURE CONTENT_DELETE(T_ID IN NUMBER)
IS
BEGIN


    FOR CURSOR IN (SELECT * FROM EXAM)
    LOOP
        IF CURSOR.CONTENT_ID=T_ID THEN
            EXAM_DELETE(CURSOR.ID);
        end if;
        end loop;

    DELETE FROM CONTENT WHERE ID=T_ID;

end;
/

create PROCEDURE COURSE_DELETE(T_ID IN NUMBER)
IS
BEGIN
    DELETE FROM TEACHES WHERE COURSE_ID=T_ID;

    FOR CURSOR IN (SELECT * FROM COURSE_REGISTRATION)
    LOOP
        IF CURSOR.COURSE_ID=T_ID THEN
            COURSE_REGISTRATION_DELETE(CURSOR.ID);
        end if;
        end loop;

    FOR CURSOR IN (SELECT * FROM CONTENT)
    LOOP
        IF CURSOR.COURSE_ID=T_ID THEN
            CONTENT_DELETE(CURSOR.ID);
        end if;
        end loop;

    DELETE FROM  "Course" WHERE ID=T_ID;
end;
/

create PROCEDURE COURSE_REGISTRATION_DELETE(T_ID IN NUMBER)
IS
BEGIN
    DELETE FROM ANSWERS WHERE COURSE_REGISTRATION_ID=T_ID;
    DELETE FROM PARTICIPATES WHERE COURSE_REGISTRATION_ID=T_ID;
    DELETE FROM  COURSE_REGISTRATION WHERE ID=T_ID;
end;
/

create PROCEDURE EXAM_DELETE(T_ID IN NUMBER)
IS
BEGIN
    DELETE FROM PARTICIPATES WHERE EXAM_ID=T_ID;

    FOR CURSOR IN (SELECT * FROM QA)
    LOOP
        IF CURSOR.EXAM_ID=T_ID THEN
            QA_DELETE(CURSOR.ID);
        end if;
        end loop;

    FOR CURSOR IN (SELECT * FROM FORUM)
    LOOP
        IF CURSOR.EXAM_ID=T_ID THEN
            FORUM_DELETE(CURSOR.FORUM_ID);
        end if;
        end loop;

    DELETE FROM EXAM WHERE ID=T_ID;

end;
/

create PROCEDURE FORUM_DELETE(ID IN NUMBER)
IS
BEGIN
    FOR CURSOR IN (SELECT * FROM "COMMENT")
    LOOP
        IF CURSOR.FORUM_ID=ID THEN
            COMMENT_DELETE(CURSOR.ID);
        end if;
        end loop;
    DELETE FROM FORUM WHERE FORUM_ID=ID;

end;
/

create or replace FUNCTION GET_COURSE_REGISTRATION_ID(S_ID IN NUMBER,E_ID IN NUMBER)
RETURN NUMBER IS
    C_ID NUMBER;
BEGIN
    SELECT COURSE_REGISTRATION.ID INTO C_ID
    FROM COURSE_REGISTRATION, CONTENT, EXAM
    WHERE COURSE_REGISTRATION.STUDENT_ID=S_ID
    AND COURSE_REGISTRATION.COURSE_ID=CONTENT.COURSE_ID
    AND CONTENT.ID=EXAM.CONTENT_ID
    AND EXAM.ID=E_ID;
    RETURN C_ID;
end;
/

create PROCEDURE INSTRUCTOR_DELETE(T_ID IN NUMBER)
IS
BEGIN

    DELETE FROM TEACHES WHERE INSTRUCTOR_ID=T_ID;
    DELETE FROM "Instructor" WHERE ID=T_ID;
end;
/

create PROCEDURE QA_DELETE(QA_ID IN NUMBER)
IS
BEGIN
    FOR CURSOR IN (SELECT * FROM ANSWERS)
    LOOP
        IF CURSOR.QA_ID=QA_ID THEN
            DELETE FROM ANSWERS WHERE ANSWERS.QA_ID=CURSOR.QA_ID;
        end if;
        end loop;
    DELETE FROM QA WHERE ID=QA_ID;

end;
/

create PROCEDURE STUDENT_DELETE(T_ID IN NUMBER)
IS
BEGIN

    FOR CURSOR IN (SELECT * FROM COURSE_REGISTRATION)
    LOOP
        IF CURSOR.STUDENT_ID=T_ID THEN
            COURSE_REGISTRATION_DELETE(CURSOR.ID);
        end if;
        end loop;
    DELETE FROM "Student" WHERE ID=T_ID;

end;
/

create FUNCTION TEST_FUNC(TIN IN NUMBER)
RETURN VARCHAR2 IS

    TEMP VARCHAR2(100);
BEGIN
    SELECT "Name" INTO TEMP FROM "User" WHERE ID=TIN;
    RETURN TEMP;
end;
/

create trigger TEACHES_CONTROL
    before insert
    on TEACHES
    for each row
DECLARE
    HAS_INSTRUCTOR NUMBER;
    MULTIPLE_INSTRUCTOR EXCEPTION ;
    PRAGMA EXCEPTION_INIT ( MULTIPLE_INSTRUCTOR, -156  );
BEGIN
    SELECT COUNT(*) INTO HAS_INSTRUCTOR FROM TEACHES WHERE COURSE_ID=:NEW.COURSE_ID;
    IF HAS_INSTRUCTOR>0 THEN
        RAISE_APPLICATION_ERROR(-156, 'a course cannot have multiple instructors');
    end if;

end;
/

create trigger PARTICIPATION_CONTROL
    before insert
    on PARTICIPATES
    for each row
DECLARE
    IS_REG NUMBER;
    COURSE_NO NUMBER;
    CONTENT_NO NUMBER;
    INVALID_REGISTRATION EXCEPTION ;
    PRAGMA EXCEPTION_INIT ( INVALID_REGISTRATION, -99  );
BEGIN
    SELECT EXAM.CONTENT_ID INTO CONTENT_NO FROM EXAM WHERE EXAM.ID=:NEW.EXAM_ID;
    SELECT CONTENT.COURSE_ID INTO COURSE_NO FROM CONTENT WHERE CONTENT.ID=CONTENT_NO;

    SELECT COUNT(*) INTO IS_REG FROM COURSE_REGISTRATION WHERE ID=:NEW.COURSE_REGISTRATION_ID AND COURSE_ID=COURSE_NO;
    IF IS_REG=0 THEN
        RAISE_APPLICATION_ERROR(-99, 'exam and course_reg does not match');
    end if;

end;
/

create trigger COMMENT_CONTROL
    before insert
    on "COMMENT"
    for each row
DECLARE
    IS_TEACHER NUMBER;
    IS_STUDENT NUMBER;
    COURSE_NO NUMBER;
    CONTENT_NO NUMBER;
    EXAM_NO NUMBER;
    INVALID_USER EXCEPTION ;
    PRAGMA EXCEPTION_INIT ( INVALID_USER, -12312  );
BEGIN
    SELECT FORUM.EXAM_ID INTO EXAM_NO FROM FORUM WHERE FORUM.FORUM_ID=:NEW.FORUM_ID;
    SELECT EXAM.CONTENT_ID INTO CONTENT_NO FROM EXAM WHERE EXAM.ID=EXAM_NO;
    SELECT CONTENT.COURSE_ID INTO COURSE_NO FROM CONTENT WHERE CONTENT.ID=CONTENT_NO;

    SELECT COUNT(*) INTO IS_STUDENT FROM COURSE_REGISTRATION WHERE STUDENT_ID=:NEW.USER_ID AND COURSE_ID=COURSE_NO;
    SELECT COUNT(*) INTO IS_TEACHER FROM TEACHES WHERE INSTRUCTOR_ID=:NEW.USER_ID AND COURSE_ID=COURSE_NO;

    IF IS_STUDENT=0 AND IS_TEACHER=0 THEN
        RAISE INVALID_USER;
    end if;

end;
/

create trigger ANSWER_CONTROL
    before insert
    on ANSWERS
    for each row
DECLARE
    IS_REG NUMBER;
    COURSE_NO NUMBER;
    CONTENT_NO NUMBER;
    EXAM_NO NUMBER;
    INVALID_REGISTRATION EXCEPTION ;
    PRAGMA EXCEPTION_INIT ( INVALID_REGISTRATION, -111  );
BEGIN
    SELECT EXAM_ID INTO EXAM_NO FROM QA WHERE :NEW.QA_ID=QA.ID;
    SELECT CONTENT_ID INTO CONTENT_NO FROM EXAM WHERE ID=EXAM_NO;
    SELECT COURSE_ID INTO COURSE_NO FROM CONTENT WHERE ID=CONTENT_NO;

    SELECT COUNT(*) INTO IS_REG FROM COURSE_REGISTRATION WHERE ID=:NEW.COURSE_REGISTRATION_ID AND COURSE_ID=COURSE_NO;
    IF IS_REG=0 THEN
        RAISE_APPLICATION_ERROR(-111, 'not registered for exam');
    end if;

end;
/

-- auto-generated definition
create sequence COURSE_REG_SEQ
/

-- auto-generated definition
create sequence SEQ_USER
/

